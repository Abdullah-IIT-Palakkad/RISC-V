`timescale 1ns / 1ps

module DECODER(input [31:0] inst,output [4:0] rs1,rs2,rd,output reg [63:0] immediate,output reg [3:0] AluFunc,output reg bsel,wdsel,mwr,en);
    wire [6:0] opcode,func7;
    wire [2:0] func3;   
    assign rs1 = inst[19:15];
    assign rs2 = inst[24:20];
    assign rd = inst[11:7];
    assign opcode = inst[6:0];
    assign func3 = inst[14:12];
    assign func7 = inst[31:25];
    always@(*) begin
        case(opcode)
            7'b0110011 : begin     // R - type
                    if(func3 == 3'b000)begin   //add or sub
                        if(func7==7'b0000000)
                            AluFunc = 4'b0000;
                        else if(func7==7'b0100000)
                            AluFunc = 4'b0001;
                    end
                    bsel=0;
                    wdsel=0;
                    mwr = 0;
                    en=1;
            end
            7'b0010011 : begin     //I - type arithmetic
                    if(func3 == 3'b000)begin
                        AluFunc = 0000;
                        bsel = 1;
                        immediate = {{52{inst[31]}},inst[31:20]};
                        wdsel=0;
                        mwr = 0;
                        en=1;
                    end
            end
            7'b0000011 : begin     //I - type load
                    if(func3 == 3'b011)begin
                        AluFunc = 0000;
                        bsel = 1;
                        immediate = {{52{inst[31]}},inst[31:20]};
                        wdsel = 1;
                        mwr = 0;
                        en=1;
                    end            
            end
            7'b0100011 : begin     //S - type 
                    if(func3 == 3'b111)begin
                        immediate = {{52{inst[31]}},inst[31:26],inst[11:7]};
                        wdsel = 0;
                        bsel=1;
                        wdsel=0;
                        AluFunc = 0000;
                        mwr = 1;
                        en=0;
                    end
            end
        endcase
    end
endmodule









//    always@(*)begin
//        if(opcode == 7'b0110011 && func3 == 0)begin
//            if(func7 == 0) begin
//                AluFunc = 4'b0000;
//            end
//            else if(func7 == 7'b0100000 )begin
//                AluFunc = 4'b0001;
//            end    
//        end  
//    end
    
//            
//            
//            7'b1100111 : begin     //SB - type
//            end
//            7'b0110111 : begin     //U - type
//            end
//            7'b1101111 : begin     //UJ - type
//            end