`timescale 1ns / 1ps
module main(input clk,output [31:0] inst,output [3:0] func,output [31:0] res,output reg [4:0] wa);
    wire [31:0] A,B,immed;
    wire [4:0] rs1,rs2,rd; 
    wire en,imm;   
    reg [31:0] fetch,val1,val2,out_val;
    reg [4:0] w_addr;
    reg [3:0] op;
    reg w_en;
    reg enable_IM=0;
    integer i=-1;
    always@(posedge clk) begin
        i=i+1;
        if(i%4==0)  enable_IM = 1;
        if(i%4==1)  enable_IM = 0;
    end    
    always@(posedge clk) begin
        fetch <= inst;
        op <= func;
        w_addr <= rd;
        wa <= w_addr;
        val1 <= A;
        val2 <= (imm==0)?B:immed ;
        out_val <= res;
        w_en <= en;
    end
    IM mem(.clk(clk),.enable(enable_IM),.inst(inst));
    DECODER control(.inst(fetch),.rs1(rs1),.rs2(rs2),.rd(rd),.AluFunc(func),.bsel(imm),.immediate(immed));
    REG_FILE rf(.clk(clk),.RA1(rs1),.RA2(rs2),.WA(wa),.WD(out_val),.W_EN(w_en),.RD1(A),.RD2(B));
    ALU alu32(.A(val1),.B(val2),.op(op),.result(res),.en(en));
endmodule
